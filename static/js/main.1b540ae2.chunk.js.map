{"version":3,"sources":["marker.svg","MapboxGLMap.js","Studio.js","Studios.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","width","height","position","latitude","longitude","zoom","MapboxGLMap","useState","map","setMap","useEffect","navigator","geolocation","getCurrentPosition","newViewport","coords","mapboxApiAccessToken","mapStyle","onViewportChange","viewport","className","src","marker","Studio","icon","faComment","faSave","Studios","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,gOCKrCC,EAAS,CACbC,MAAO,QACPC,OAAQ,qBACRC,SAAU,WACVC,SAAU,SACVC,WAAY,UACZC,KAAM,GA4COC,MAtCf,WAAyB,IAAD,EACEC,mBAASR,GADX,mBACbS,EADa,KACRC,EADQ,OAEoBF,mBAAS,MAF7B,mBAoBtB,OApBsB,UAKpBG,qBAAU,WACNC,UAAUC,YAAYC,oBAAmB,SAAAX,GACrC,IAAIY,EAAc,CACdd,MAAO,QACPC,OAAQ,QACRC,SAAU,WACVC,SAAUD,EAASa,OAAOZ,SAC1BC,UAAWF,EAASa,OAAOX,UAC3BC,KAAM,IAEVI,EAAOK,QAEZ,IAIC,6BACI,kBAAC,IAAD,iBAAgBN,EAAhB,CACAQ,qBAAqB,yFACrBC,SAAS,iCACTC,iBAAmB,SAAAC,GAAQ,OAAIV,EAAOU,MAElC,kBAAC,IAAD,CACIhB,SAAUK,EAAIL,SACdC,UAAWI,EAAIJ,WAEf,yBAAKgB,UAAU,gBAAgBC,IAAKC,U,gBCbzCC,MA/Bf,WAEI,OACI,6BAASH,UAAU,UAEf,yBAAKA,UAAU,kBACX,yBAAKC,IAAI,mEAAmED,UAAU,gBACtF,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,eAAd,eACA,uBAAGA,UAAU,uBAAsB,0BAAMA,UAAU,UAAnD,mBAIR,uBAAGA,UAAU,sBAAb,6DAEA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,eAAeC,IAAI,kFAClC,yBAAKD,UAAU,eAAeC,IAAI,yEAClC,yBAAKD,UAAU,eAAeC,IAAI,qFAClC,yBAAKD,UAAU,eAAeC,IAAI,kLAItC,yBAAKD,UAAU,kBACX,2BAAG,kBAAC,IAAD,CAAiBI,KAAMC,IAAWL,UAAU,mBAA/C,iBACA,2BAAG,kBAAC,IAAD,CAAiBI,KAAME,IAAQN,UAAU,mBAA5C,sB,MCZDO,MAbf,WAGI,OACI,2BAAOP,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCIGQ,MAVf,WAEE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1b540ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marker.173391a4.svg\";","import React, { useEffect, useRef, useState } from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";  \nimport marker from \"./marker.svg\";\n\nconst styles = {\n  width: \"100vw\",\n  height: \"calc(100vh - 80px)\",\n  position: \"absolute\",\n  latitude: 42.43234,\n  longitude: -123.43567,\n  zoom: 1\n\n\n};\n\n\nfunction MapboxGLMap () {\n    const [map, setMap] = useState(styles);\n    const [userLocation, setuserLocation] = useState(null);\n  \n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(position => {            \n            let newViewport = {\n                width: \"100vw\",\n                height: \"100vh\",\n                position: \"absolute\",\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n                zoom: 16\n            }\n            setMap(newViewport)\n        })\n    }, []);\n\n\n  return (\n        <div>\n            <ReactMapGL {...map}             \n            mapboxApiAccessToken=\"pk.eyJ1IjoiZ2xvZXIiLCJhIjoiY2l2cm4ya3hxMDAyYTJ6bHU5MzZjcHNnbSJ9.PmFpGo0iUpws5YtIBnzVBQ\" \n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            onViewportChange={(viewport => setMap(viewport))}\n            >\n                <Marker\n                    latitude={map.latitude}\n                    longitude={map.longitude}\n                    >\n                    <img className=\"location-icon\" src={marker} />\n                    </Marker>\n            </ReactMapGL>\n        </div>\n    )\n};\n\nexport default MapboxGLMap;","import React from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faComment, faSave } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Studio () {\n\n    return (\n        <article className=\"studio\">\n\n            <div className=\"studio-heading\">\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/76/MTV_Logo.svg\" className=\"studio-logo\" />  \n                <div className=\"name-and-availability\">\n                    <h1 className=\"studio-name\">Urban sound</h1>\n                    <p className=\"studio-availability\"><span className=\"blink\"></span>Available now</p>\n                </div>\n            </div>\n\n            <p className=\"studio-description\">Helping Artists, Producers Labels Achieve Mixes & Masters</p>\n\n            <div className=\"studio-images\">\n                <img className=\"studio-image\" src=\"https://assets.capitalxtra.com/2017/47/post-malone-9-1511279549-view-1.png   \" />\n                <img className=\"studio-image\" src=\"http://photos1.blogger.com/blogger/3954/945/1600/wilsonpickett00.jpg\" />\n                <img className=\"studio-image\" src=\"https://c-sf.smule.com/sf/s80/arr/f5/27/012c1534-7bb5-42e3-8d92-551a18f938d7.jpg\" />\n                <img className=\"studio-image\" src=\"https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/arts/2004/07/30/andyCatlin_macgowan1.jpg?width=300&quality=85&auto=format&fit=max&s=b5657c333f4ad1f38b6ec363ee02597d\" />\n            </div>\n            \n\n            <div className=\"call-to-action\">\n                <p><FontAwesomeIcon icon={faComment} className=\"studio-comment\" /> Send message</p>                \n                <p><FontAwesomeIcon icon={faSave} className=\"studio-comment\" /> Save for later</p>\n            </div>\n        </article>\n    )\n}\n\nexport default Studio","import React from \"react\"\nimport Studio from \"./Studio\"\nimport './Studios.css'\n\nfunction Studios() {\n\n\n    return (\n        <aside className=\"studios\">\n            <Studio />\n            <Studio />\n            <Studio />\n        </aside>\n    )\n\n}\n\nexport default Studios","import React from 'react'\nimport MapboxGLMap from './MapboxGLMap'\nimport Studios from './Studios'\nimport './App.css'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <MapboxGLMap />\n      <Studios />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}